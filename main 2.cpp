#include<iostream>
#include <ctime>
using namespace std;


class Numbers {
private:
	int array[100000];
	float sum;
	float avg;


public:
  int generateArray();
  void display();
	void bubbleSort();
	void insertionSort();
	int binarySearch(float x);
	int linearSearch(int x);
};
//1. method to generate 1000 random values 
int Numbers::generateArray(){
  for (int i = 0; i<100000; i++){
        array[i] = rand() % 1000 + 1;
    } 
}

//2. Prints values generated by previous method
void Numbers::display(){
 cout << "\nThe 1000 random values generated are: " << endl;
 cout <<endl;
  generateArray();
  for (int i = 0; i < 100000; i++){
        cout << array[i] << " ";
    } 
}


//5. method to sort
void Numbers::bubbleSort(){
  int i, j;
  float temp;
  for(i=0; i<100000; i++){
    for (j=i+1; j<100000-i; j++){
      //Comparing elements
      if (array[i] > array[j]){
        //Swapping elements
        temp = array[j];
        array[j] = array[i];
        array[i] = temp;
      }
    }
  }
}
//6. method for insertionSort
void Numbers::insertionSort(){
  int i, j, tmp;
  for(i=1; i<100000; i++){
    j = i;
    while(j>0 && array[j-1]>array[j]){
      tmp = array[j];
      array[j] = array[j - 1];
      array[j - 1] = tmp;
      j--;
    }

  }
}
  
//7.search method - binarySearch
int Numbers::binarySearch(float x){
  int low = 0, high=19999, mid;
  //import sorted array
  bubbleSort();
  //insertionSort();
  while (low <= high){
  //Finding mid index
  mid = (low + high)/2;
  //Comparing element
  if (x == array[mid])
    return mid;
  else if (x < array[mid])
    high = mid - 1;
  else
    low = mid + 1;
  }
 return -1;
}
//8. search method - linearSearch
int Numbers::linearSearch(int x){
    for (int i=0; i<100000; i++)
        if (array[i] == x)
         return i;
    return -1;
}

int main(){

  int search_var;
  int index;
  int n;
	
	Numbers a;
	a.generateArray();
	a.display();
  
  //linear search
  cout<<"\n\nEnter number you want to search:";
  cin>>search_var;
  //timer for this algorithm
  clock_t start = clock();
  index=a.linearSearch(search_var);
  if(index == -1){
    cout << "\nElement not found.\n";
  }
  else{
  cout<<"\nElement " << search_var << " found at index position: " << index<<endl;
  }
  clock_t end = clock();
  double time = (double) (end-start) / CLOCKS_PER_SEC * 1000.0;
  cout<<"Execution Time: "<< time <<" ms"<<'\n';
  
  //Applying binary search 
  //timer for this algorithm
  /clock_t start = clock();
  index = a.binarySearch(search_var);

  //Checking index value
  if(index == -1){
    cout << "\nElement not found. \n";
  }
  else{
    cout<<"\nElement " << search_var << " found at index position: " << index<<endl;
  }
  clock_t end = clock();
 
  double time = (double) (end-start) / CLOCKS_PER_SEC * 1000.0;

  cout<<"Execution Time: "<< time <<" ms"<<'\n';
	return 0;
}

